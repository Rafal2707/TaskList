{"version":3,"sources":["Heading.js","List.js","TaskList.js","App.js","serviceWorker.js","index.js"],"names":["Heading","props","text","List","TasksArray","map","task","index","key","onClick","removedTasks","className","TaskList","getInputValue","event","preventDefault","setState","inputValue","target","value","addTask","state","prevState","list","concat","removeTask","filteredArray","filter","onSubmit","this","type","placeholder","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wMAQeA,G,YANC,SAAAC,GACZ,OACA,4BAAKA,EAAMC,Q,4BCWAC,EAbF,SAAAF,GAEL,IAAIE,EAAOF,EAAMG,WAAWC,KAAI,SAACC,EAAMC,GACnC,OAAO,wBAAIC,IAAKD,EAAOE,QAAS,kBAAIR,EAAMS,aAAaH,KAASD,MAGxE,OACI,wBAAIK,UAAY,aACXR,IC+CES,E,kDAlDX,aAAc,IAAD,8BACT,gBAOJC,cAAgB,SAACC,GACbA,EAAMC,iBACN,EAAKC,SAAS,CAACC,WAAYH,EAAMI,OAAOC,SAV/B,EAabC,QAAU,SAACN,GACPA,EAAMC,iBACuB,KAA1B,EAAKM,MAAMJ,aAGd,EAAKD,UAAS,SAAAM,GACV,MAAO,CACHC,KAAKD,EAAUC,KAAKC,OAAO,CAAC,EAAKH,MAAMJ,iBAI/C,EAAKD,SAAS,CAACC,WAAW,OAxBjB,EA2BbQ,WAAa,SAACX,GACV,IAAIY,EAAgB,EAAKL,MAAME,KAAKI,QAAO,SAACrB,EAAMC,GAC9C,OAAOA,IAAUO,KAGrB,EAAKE,SAAS,CAACO,KAAKG,KA9BpB,EAAKL,MAAQ,CACTE,KAAM,GACNN,WAAW,IAJN,E,qDAqCT,OACI,yBAAKN,UAAY,QACb,0BAAMiB,SAAYC,KAAKT,SACnB,2BAAOU,KAAO,WAAWC,YAAc,kCAAkCZ,MAASU,KAAKR,MAAMJ,WAAYe,SAAUH,KAAKhB,gBACxH,6CAEJ,+EACA,kBAAC,EAAD,CAAMT,WAAcyB,KAAKR,MAAME,KAAMb,aAAcmB,KAAKJ,kB,GA9CjDQ,aCSRC,MATf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,CAAST,KAAO,mBAChB,kBAAC,EAAD,QCGciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d36babe2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Heading = props => {\r\n    return (\r\n    <h1>{props.text}</h1>\r\n    )\r\n}\r\n\r\nexport default Heading;","import React from 'react';\r\n\r\nconst List = props => {\r\n\r\n        let List = props.TasksArray.map((task, index) => {\r\n            return <li key={index} onClick={()=>props.removedTasks(index)}>{task}</li>;\r\n        })\r\n\r\n    return(\r\n        <ul className = 'task-list'>\r\n            {List}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default List;","import React,{Component} from 'react';\r\nimport List from './List'\r\n\r\n\r\n\r\nclass TaskList extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            list: [],\r\n            inputValue:'',\r\n        }\r\n    }\r\n\r\n    getInputValue = (event) => {\r\n        event.preventDefault();\r\n        this.setState({inputValue: event.target.value});\r\n    }\r\n\r\n    addTask = (event) => {\r\n        event.preventDefault();\r\n        if(this.state.inputValue === ''){\r\n            return;\r\n        } \r\n        this.setState(prevState=>{\r\n            return({\r\n                list:prevState.list.concat([this.state.inputValue])\r\n             })\r\n        })\r\n\r\n        this.setState({inputValue:''})\r\n    }\r\n\r\n    removeTask = (event) => {\r\n        let filteredArray = this.state.list.filter((task, index) => {\r\n            return index !== event;\r\n        })\r\n\r\n        this.setState({list:filteredArray})\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className = 'list'>\r\n                <form onSubmit = {this.addTask}>\r\n                    <input type = 'textarea' placeholder = 'Write another task to your List' value = {this.state.inputValue} onChange={this.getInputValue}></input>\r\n                    <button>Add Task</button>\r\n                </form>\r\n                <p>If You finished your task, click to remove it :)</p>\r\n                <List TasksArray = {this.state.list} removedTasks={this.removeTask}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TaskList;","import React from 'react';\nimport './App.css';\nimport Heading from './Heading';\nimport TaskList from'./TaskList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Heading text = 'Your Task List'/>\n      <TaskList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}